// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: screen_message.proto

package protoc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Screen_Panel int32

const (
	Screen_UNKNOWN Screen_Panel = 0
	Screen_IPS     Screen_Panel = 1
	Screen_OLED    Screen_Panel = 2
)

// Enum value maps for Screen_Panel.
var (
	Screen_Panel_name = map[int32]string{
		0: "UNKNOWN",
		1: "IPS",
		2: "OLED",
	}
	Screen_Panel_value = map[string]int32{
		"UNKNOWN": 0,
		"IPS":     1,
		"OLED":    2,
	}
)

func (x Screen_Panel) Enum() *Screen_Panel {
	p := new(Screen_Panel)
	*p = x
	return p
}

func (x Screen_Panel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Screen_Panel) Descriptor() protoreflect.EnumDescriptor {
	return file_screen_message_proto_enumTypes[0].Descriptor()
}

func (Screen_Panel) Type() protoreflect.EnumType {
	return &file_screen_message_proto_enumTypes[0]
}

func (x Screen_Panel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Screen_Panel.Descriptor instead.
func (Screen_Panel) EnumDescriptor() ([]byte, []int) {
	return file_screen_message_proto_rawDescGZIP(), []int{0, 0}
}

type Screen struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Size          float32                `protobuf:"fixed32,1,opt,name=size,proto3" json:"size,omitempty"` // Diagonal size in inches
	Resulution    *Screen_Resolution     `protobuf:"bytes,2,opt,name=resulution,proto3" json:"resulution,omitempty"`
	Panel         Screen_Panel           `protobuf:"varint,3,opt,name=panel,proto3,enum=Screen_Panel" json:"panel,omitempty"`
	Multitouch    bool                   `protobuf:"varint,4,opt,name=multitouch,proto3" json:"multitouch,omitempty"` // Indicates if the screen is touch-enabled
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Screen) Reset() {
	*x = Screen{}
	mi := &file_screen_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Screen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Screen) ProtoMessage() {}

func (x *Screen) ProtoReflect() protoreflect.Message {
	mi := &file_screen_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Screen.ProtoReflect.Descriptor instead.
func (*Screen) Descriptor() ([]byte, []int) {
	return file_screen_message_proto_rawDescGZIP(), []int{0}
}

func (x *Screen) GetSize() float32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Screen) GetResulution() *Screen_Resolution {
	if x != nil {
		return x.Resulution
	}
	return nil
}

func (x *Screen) GetPanel() Screen_Panel {
	if x != nil {
		return x.Panel
	}
	return Screen_UNKNOWN
}

func (x *Screen) GetMultitouch() bool {
	if x != nil {
		return x.Multitouch
	}
	return false
}

type Screen_Resolution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Width         uint32                 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height        uint32                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Screen_Resolution) Reset() {
	*x = Screen_Resolution{}
	mi := &file_screen_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Screen_Resolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Screen_Resolution) ProtoMessage() {}

func (x *Screen_Resolution) ProtoReflect() protoreflect.Message {
	mi := &file_screen_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Screen_Resolution.ProtoReflect.Descriptor instead.
func (*Screen_Resolution) Descriptor() ([]byte, []int) {
	return file_screen_message_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Screen_Resolution) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Screen_Resolution) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

var File_screen_message_proto protoreflect.FileDescriptor

const file_screen_message_proto_rawDesc = "" +
	"\n" +
	"\x14screen_message.proto\"\xfa\x01\n" +
	"\x06Screen\x12\x12\n" +
	"\x04size\x18\x01 \x01(\x02R\x04size\x122\n" +
	"\n" +
	"resulution\x18\x02 \x01(\v2\x12.Screen.ResolutionR\n" +
	"resulution\x12#\n" +
	"\x05panel\x18\x03 \x01(\x0e2\r.Screen.PanelR\x05panel\x12\x1e\n" +
	"\n" +
	"multitouch\x18\x04 \x01(\bR\n" +
	"multitouch\x1a:\n" +
	"\n" +
	"Resolution\x12\x14\n" +
	"\x05width\x18\x01 \x01(\rR\x05width\x12\x16\n" +
	"\x06height\x18\x02 \x01(\rR\x06height\"'\n" +
	"\x05Panel\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\a\n" +
	"\x03IPS\x10\x01\x12\b\n" +
	"\x04OLED\x10\x02B\tZ\a/protocb\x06proto3"

var (
	file_screen_message_proto_rawDescOnce sync.Once
	file_screen_message_proto_rawDescData []byte
)

func file_screen_message_proto_rawDescGZIP() []byte {
	file_screen_message_proto_rawDescOnce.Do(func() {
		file_screen_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_screen_message_proto_rawDesc), len(file_screen_message_proto_rawDesc)))
	})
	return file_screen_message_proto_rawDescData
}

var file_screen_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_screen_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_screen_message_proto_goTypes = []any{
	(Screen_Panel)(0),         // 0: Screen.Panel
	(*Screen)(nil),            // 1: Screen
	(*Screen_Resolution)(nil), // 2: Screen.Resolution
}
var file_screen_message_proto_depIdxs = []int32{
	2, // 0: Screen.resulution:type_name -> Screen.Resolution
	0, // 1: Screen.panel:type_name -> Screen.Panel
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_screen_message_proto_init() }
func file_screen_message_proto_init() {
	if File_screen_message_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_screen_message_proto_rawDesc), len(file_screen_message_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_screen_message_proto_goTypes,
		DependencyIndexes: file_screen_message_proto_depIdxs,
		EnumInfos:         file_screen_message_proto_enumTypes,
		MessageInfos:      file_screen_message_proto_msgTypes,
	}.Build()
	File_screen_message_proto = out.File
	file_screen_message_proto_goTypes = nil
	file_screen_message_proto_depIdxs = nil
}
