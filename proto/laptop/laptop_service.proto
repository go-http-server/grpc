syntax = "proto3";

option go_package = "/protoc";

import "laptop/laptop_message.proto";
import "laptop/filter_message.proto";

message CreateLaptopRequest {
  Laptop laptop = 1; // Laptop to be created
}

message CreateLaptopResponse {
  string id = 1; // Unique identifier for the created laptop
}

message SearchLaptopRequest {
  Filter filter = 1; // Filter criteria for searching laptops
}

message SearchLaptopResponse {
  Laptop laptop = 1; // searched laptop response
}

message UploadImageRequest {
  oneof data {
    ImageInfo info = 1; // Image information
    bytes chunk_data = 2; // Image data chunk
  }
}

message ImageInfo {
  string laptop_id = 1; // Unique identifier for the image
  string image_type = 2; // Type of the image (e.g., thumbnail, full-size)
}

message UploadImageResponse {
  string id = 1; // Unique identifier for the uploaded image
  uint32 size = 2; // Size of the uploaded image in bytes
}

message RateLaptopRequest {
  string laptop_id = 1; // Unique identifier for the laptop being rated
  double score = 2; // Rating score (e.g., 1-5)
}

message RateLaptopResponse {
  string laptop_id = 1; // Unique identifier for the rated laptop
  uint32 rated_count = 2; // Total number of ratings received
  double average_score = 3; // Average score of the laptop
}

service LaptopService {
  // Create a new laptop
  rpc CreateLaptop(CreateLaptopRequest) returns (CreateLaptopResponse);

  // Search for laptops based on filter criteria
  rpc SearchLaptop(SearchLaptopRequest) returns (stream SearchLaptopResponse);

  // Upload an image for a laptop -> use client streaming
  rpc UploadImage(stream UploadImageRequest) returns (UploadImageResponse);

  // Rate laptop -> use bidirectional streaming
  rpc RateLaptop(stream RateLaptopRequest) returns (stream RateLaptopResponse);
}
